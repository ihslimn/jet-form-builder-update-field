"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Circle", {
  enumerable: true,
  get: function () {
    return _reactNativeSvg.Circle;
  }
});
Object.defineProperty(exports, "G", {
  enumerable: true,
  get: function () {
    return _reactNativeSvg.G;
  }
});
Object.defineProperty(exports, "Path", {
  enumerable: true,
  get: function () {
    return _reactNativeSvg.Path;
  }
});
Object.defineProperty(exports, "Polygon", {
  enumerable: true,
  get: function () {
    return _reactNativeSvg.Polygon;
  }
});
Object.defineProperty(exports, "Rect", {
  enumerable: true,
  get: function () {
    return _reactNativeSvg.Rect;
  }
});
Object.defineProperty(exports, "Defs", {
  enumerable: true,
  get: function () {
    return _reactNativeSvg.Defs;
  }
});
Object.defineProperty(exports, "RadialGradient", {
  enumerable: true,
  get: function () {
    return _reactNativeSvg.RadialGradient;
  }
});
Object.defineProperty(exports, "LinearGradient", {
  enumerable: true,
  get: function () {
    return _reactNativeSvg.LinearGradient;
  }
});
Object.defineProperty(exports, "Stop", {
  enumerable: true,
  get: function () {
    return _reactNativeSvg.Stop;
  }
});
exports.SVG = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _reactNativeSvg = require("react-native-svg");

var _reactNative = require("react-native");

var _style = _interopRequireDefault(require("./style.scss"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const AnimatedSvg = _reactNative.Animated.createAnimatedComponent((0, _element.forwardRef)((props, ref) => (0, _element.createElement)(_reactNativeSvg.Svg, (0, _extends2.default)({
  ref: ref
}, props))));

const SVG = ({
  className = '',
  isPressed,
  animated = false,
  ...props
}) => {
  const colorScheme = props.colorScheme || 'light';
  const stylesFromClasses = className.split(' ').map(element => _style.default[element]).filter(Boolean);
  const defaultStyle = isPressed ? _style.default['is-pressed'] : _style.default['components-toolbar__control-' + colorScheme];
  const propStyle = Array.isArray(props.style) ? props.style.reduce((acc, el) => {
    return { ...acc,
      ...el
    };
  }, {}) : props.style;
  const styleValues = Object.assign({}, defaultStyle, propStyle, ...stylesFromClasses);
  const appliedProps = { ...props,
    style: styleValues
  };
  const SvgWrapper = animated ? AnimatedSvg : _reactNativeSvg.Svg;
  return (0, _element.createElement)(SvgWrapper //We want to re-render when style color is changed
  , (0, _extends2.default)({
    key: appliedProps.style.color,
    height: "100%",
    width: "100%"
  }, appliedProps));
};

exports.SVG = SVG;
//# sourceMappingURL=index.native.js.map